// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module media.logs;

import "apps/media/services/media_types.fidl";
import "apps/media/services/timelines.fidl";

[ServiceName="media::logs::MediaRendererChannel"]
interface MediaRendererChannel {
  BoundAs(uint64 koid);
  Config(
      array<MediaTypeSet> supported_types,
      uint64 consumer_address,
      uint64 timeline_control_point_address);
  SetMediaType(MediaType media_type);

  // Establishes the PTS rate used for PTS values in |EngagePacket| and
  // |RenderRange|. The default PTS rate is |TimelineRate::NsPerSecond|.
  PtsRate(uint32 ticks, uint32 seconds);

  // Reports packet usage in a manner suitable for video renderers. This method
  // essentially states that the renderer looked for a packet to render at
  // presentation time |current_pts| and selected a packet with a PTS of
  // |packet_pts| and label |packet_label|. If no packet was available for
  // rendering, |packet_pts| is |MediaPacket::kNoTimestamp| and |packet_label|
  // is zero. Note that the units reflected by the PTS values is established
  // using the |PtsRate| method.
  EngagePacket(int64 current_pts, int64 packet_pts, uint64 packet_label);

  // Reports packet usage in a manner suitable for audio renderers. This method
  // essentially states that the renderer needed content for the range starting
  // at |pts| and ending immediately before |pts + duration|. Note that the
  // units reflected by the PTS values is established using the |PtsRate|
  // method.
  RenderRange(int64 pts, uint32 duration);
};
