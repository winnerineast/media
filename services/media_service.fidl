// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module media;

import "apps/media/services/audio_renderer.fidl";
import "apps/media/services/media_capturer.fidl";
import "apps/media/services/media_player.fidl";
import "apps/media/services/media_renderer.fidl";
import "apps/media/services/media_sink.fidl";
import "apps/media/services/media_source.fidl";
import "apps/media/services/media_type_converter.fidl";
import "apps/media/services/media_types.fidl";
import "apps/media/services/seeking_reader.fidl";
import "apps/media/services/timeline_controller.fidl";
import "apps/media/services/video_renderer.fidl";

// Primary media service definition.
[ServiceName="media::MediaService"]
interface MediaService {
  // Creates a player.
  CreatePlayer(SeekingReader reader,
               MediaRenderer? audio_renderer,
               MediaRenderer? video_renderer,
               MediaPlayer& player);

  // Creates a source. If allowed_media_types is supplied, conversions will be
  // added to each stream as needed to make the media type of the stream match
  // one of the allowed types. If a stream cannot be converted to one of the
  // allowed types, its media type will have the scheme NONE, and the stream
  // will not be usable.
  CreateSource(SeekingReader reader,
               array<MediaTypeSet>? allowed_media_types,
               MediaSource& source);

  // Creates a sink. Conversions are added to the pipeline as appropriate to
  // convert a media type supported by the renderer.
  CreateSink(MediaRenderer? renderer,
             MediaType media_type,
             MediaSink& sink);

  // Creates a demux.
  CreateDemux(SeekingReader reader, MediaSource& demux);

  // Creates a decoder.
  CreateDecoder(MediaType input_media_type, MediaTypeConverter& decoder);

  // Creates a network reader.
  CreateNetworkReader(string url, SeekingReader& reader);

  // Creates a file reader.
  CreateFileReader(string path, SeekingReader& reader);

  // Creates an audio renderer.
  CreateAudioRenderer(AudioRenderer& audio_renderer,
                      MediaRenderer& media_renderer);

  // Creates a video renderer.
  CreateVideoRenderer(VideoRenderer& video_renderer,
                      MediaRenderer& media_renderer);

  // Creates an audio capturer.
  CreateAudioCapturer(MediaCapturer& media_capturer);

  // Creates a timeline controller reader.
  CreateTimelineController(MediaTimelineController& timeline_controller);

  // Creates a reformatter for LPCM audio.
  CreateLpcmReformatter(MediaType input_media_type,
                        AudioSampleFormat output_sample_format,
                        MediaTypeConverter& lpcm_reformatter);

  // Creates a player proxy.
  CreatePlayerProxy(string device_name,
                    string service_name,
                    MediaPlayer& player);

};
