// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module media;

import "apps/media/services/media_metadata.fidl";
import "apps/media/services/media_transport.fidl";
import "apps/media/services/media_types.fidl";
import "apps/media/services/problem.fidl";

// Produces media streams delivered from a specified origin.
interface MediaSource {
  // Special value for GetStatus version_last_seen parameter to get the current
  // status immediately.
  const uint64 kInitialStatus = 0;

  // Describes the source.
  Describe() => (array<MediaType> stream_types);

  // Gets the packet producer for the specified stream.
  GetPacketProducer(uint32 stream_index, MediaPacketProducer& packet_producer);

  // Gets the status. To get the status immediately, call
  // GetStatus(kInitialStatus). To get updates thereafter, pass the version
  // sent in the previous callback.
  GetStatus(uint64 version_last_seen)
      => (uint64 version, MediaSourceStatus status);

  // Flushes the source and downstream components.
  Flush() => ();

  // Seeks to the specified position, specified in nanoseconds.
  Seek(int64 position) => ();
};

// Describes the status of the media source.
struct MediaSourceStatus {
  // Describes the media.
  MediaMetadata? metadata;

  // Indicates a problem preventing intended operation.
  Problem? problem;
};
