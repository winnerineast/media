// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module media;

import "apps/media/interfaces/media_common.fidl";
import "apps/media/interfaces/media_types.fidl";

// Describes a fragment of media content, including metadata and a locator for
// the payload.
struct MediaPacket {
  const int64 kNoTimestamp = 0x7fffffffffffffff;

  // Presentation timestamp. Time at which the media should be presented,
  // according to the media timeline.
  int64 pts = kNoTimestamp;

  // Indicates the number of PTS ticks that correspond to pts_rate_seconds
  // seconds. In other words, the time represented by a single PTS tick in
  // seconds is pts_rate_ticks / pts_rate_seconds. For example, if PTS is
  // given in nanoseconds, pts_rate_ticks would be 1,000,000,000, and
  // pts_rate_seconds would be 1.
  uint32 pts_rate_ticks;

  // Indicates the number of seconds that correspond to pts_rate_ticks
  // PTS ticks. See pts_rate_ticks for more info.
  uint32 pts_rate_seconds;

  // Indicates whether this is the last packet in the stream.
  bool end_of_stream;

  // Identifier of the shared buffer that contains the payload for this packet.
  // This identifier must be established by a call to MediaPacketConsumer's
  // AddPayloadBuffer method before it can be used.
  uint32 payload_buffer_id;

  // Offset of the packet payload in the indicated shared buffer.
  uint64 payload_offset;

  // Size in bytes of the packet payload.
  uint64 payload_size;
};

// Describes consumer demand for MediaPackets. Demand is initially assumed to
// be the default values given below. Changes in demand can be signalled
// in-band with SupplyPacket responses or by responding to PullDemandUpdate.
struct MediaPacketDemand {
  // The minimum number of packets that should be outstanding at any moment.
  // The producer should try to keep at least this many SupplyPacket operations
  // pending.
  uint32 min_packets_outstanding = 0;

  // The minimum packet PTS value. If the last packet supplied has a PTS less
  // than this value, another packet should be supplied. A value of kNoTimestamp
  // means this value is not applicable.
  int64 min_pts = MediaPacket.kNoTimestamp;
};

// Models a stream producer. A MediaPacketProducer allows a client to connect
// the producer to a MediaPacketConsumer so packets flow from the producer to
// the consumer.
//
// The client calls Connect to connect producer and consumer. The producer then
// calls PushPacket on the consumer to deliver packets.
interface MediaPacketProducer {
  // Connects this MediaPacketProducer to a MediaPacketConsumer.
  Connect(MediaPacketConsumer consumer) => ();

  // Disconnects this MediaPacketProducer from a previously-connected
  // MediaPacketConsumer.
  Disconnect();
};

// Models a stream consumer. A MediaPacketConsumer allows a client to send
// packets directly to the consumer or to connect the consumer to a
// MediaPacketProducer so packets flow from the producer to the consumer.
//
// In the former scenario, the client calls PushPacket to deliver a packet. The
// callback notifies the client that the consumer is done with the packet
// buffer region.
//
// In the latter scenario, the client calls Connect on the producer to connect
// producer and consumer. The producer then calls PushPacket on the consumer to
// deliver packets.
interface MediaPacketConsumer {
  const uint64 kMaxBufferLen = 0x3FFFFFFFFFFFFFFF;

  // Gets the demand. The consumer is free to respond to this method when it
  // sees fit to do so. Demand can be communicated in the response to
  // SupplyPacket, so this method is only used when the demand update can't wait
  // until the next SupplyPacket response is sent.
  PullDemandUpdate() => (MediaPacketDemand? demand);

  // Adds a payload buffer that may subsequently be referenced by a MediaPacket.
  AddPayloadBuffer(uint32 payload_buffer_id,
                   handle<vmo> payload_buffer);

  // Indicates that the identified payload buffer will no longer be used.
  RemovePayloadBuffer(uint32 payload_buffer_id);

  // Supplies a packet to the consumer. The callback signals that the consumer
  // is done with the packet and its payload. Demand is only provided in the
  // response if it has changed.
  SupplyPacket(MediaPacket packet) => (MediaPacketDemand? demand);

  // Flushes the stream. The callback signals that the flush operation is
  // complete.
  Flush() => ();
};
